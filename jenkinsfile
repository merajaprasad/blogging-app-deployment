pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven3'
    }

    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage ('git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/merajaprasad/blogging-app-deployment.git'
            }
        }

        stage ('Compile') {
            steps {
               sh "mvn compile"
            }
        }

        stage ('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage ('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs.html . '
            }
        }

        stage ('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Blogging-app -Dsonar.projectKey=Blogging-app \
                      -Dsonar.java.binaries=target '''

                }
            }
        }

        stage ('Build') {
            steps {
                sh 'mvn package'
            }
        }

        stage ('Publish Artifacts') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy"
                }
            }
        }

        stage ('Docker Build and Tag') {
            steps {
                script {
                withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                
                sh 'docker build -t merajaprasd/bloggingapp:latest .'

                }

                }
            }
        }

        stage ('Trivy Image Scan') {
            steps {
                sh 'trivy image --format table -o image.html merajaprasd/bloggingapp:latest '
            }
        }

        stage ('Docker push Image') {
            steps {
                script {
                withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                
                sh 'docker push merajaprasd/bloggingapp:latest'

                }

                }
            }
        }

        stage ('Kubernetes Deploy') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'bloggingapp', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://4DA426F79A68ED5F7AB3CC6BE90FA5CE.yl4.us-west-2.eks.amazonaws.com') {
                    sh "kubectl apply -f deployment-service.yml"
                    sleep 20
                }
            }
        }

        stage ('Varify Kubernetes Deployments') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'bloggingapp', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://4DA426F79A68ED5F7AB3CC6BE90FA5CE.yl4.us-west-2.eks.amazonaws.com') {
                    sh "kubectl get pods"
                    sh "kubectl get svc"
                }
            }
        }


    }

    post {
    always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME} <br/>" +
                  "Build Number: ${env.BUILD_NUMBER}<br/>" +
                  "URL: ${env.BUILD_URL}<br/>",
            to: 'rajaprasad.rp731@gmail.com',
            from: 'jenkins@example.com',
            replyTo: 'jenkins@example.com',
            attachmentsPattern: 'fs.html,image.html'
        }

    }

}